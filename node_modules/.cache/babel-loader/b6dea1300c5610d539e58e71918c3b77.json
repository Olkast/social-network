{"ast":null,"code":"const ADD_MESSAGE = 'ADD-MESSAGE';\nconst UPDATE_MESSAGE = 'UPDATE-MESSAGE';\nconst initialState = {\n  dialogData: [{\n    id: 1,\n    name: \"Alex\"\n  }, {\n    id: 2,\n    name: \"Petya\"\n  }, {\n    id: 3,\n    name: \"Olga\"\n  }, {\n    id: 4,\n    name: \"Vanya\"\n  }, {\n    id: 5,\n    name: \"Petya\"\n  }, {\n    id: 6,\n    name: \"Tanya\"\n  }],\n  messagesData: [{\n    id: 1,\n    message: \"Hello\"\n  }, {\n    id: 2,\n    message: \"No\"\n  }, {\n    id: 3,\n    message: \"Yes\"\n  }, {\n    id: 4,\n    message: \"Hello\"\n  }, {\n    id: 5,\n    message: \"No\"\n  }, {\n    id: 6,\n    message: \"Yes\"\n  }],\n  newMessageText: 'react'\n};\nconst dialogsReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  switch (action.type) {\n    case ADD_MESSAGE:\n      const newMessage = {\n        id: 5,\n        message: state.newMessageText\n      };\n      let copyState1 = {\n        ...state\n      };\n      copyState1.copyMessagesData = [...state.messagesData];\n      copyState1.copyMessagesData.push(newMessage);\n      copyState1.newMessageText = '';\n      return copyState1;\n    case UPDATE_MESSAGE:\n      let copyState2 = {\n        ...state\n      };\n      copyState2.newMessageText = action.text;\n      return copyState2;\n    default:\n      return state;\n  }\n};\nexport const AddMessageActionCreator = () => ({\n  type: ADD_MESSAGE\n});\n_c = AddMessageActionCreator;\nexport const UpDateMessageActionCreator = text => ({\n  type: UPDATE_MESSAGE,\n  message: text\n});\n_c2 = UpDateMessageActionCreator;\nexport default dialogsReducer;\nvar _c, _c2;\n$RefreshReg$(_c, \"AddMessageActionCreator\");\n$RefreshReg$(_c2, \"UpDateMessageActionCreator\");","map":{"version":3,"names":["ADD_MESSAGE","UPDATE_MESSAGE","initialState","dialogData","id","name","messagesData","message","newMessageText","dialogsReducer","state","action","type","newMessage","copyState1","copyMessagesData","push","copyState2","text","AddMessageActionCreator","UpDateMessageActionCreator"],"sources":["/home/home/Olya_projects/social_network/src/redux/dialogs-reducer.js"],"sourcesContent":["const ADD_MESSAGE = 'ADD-MESSAGE';\nconst UPDATE_MESSAGE = 'UPDATE-MESSAGE';\n\nconst initialState = {\n    dialogData: [\n        {id: 1, name: \"Alex\"},\n        {id: 2, name: \"Petya\"},\n        {id: 3, name: \"Olga\"},\n        {id: 4, name: \"Vanya\"},\n        {id: 5, name: \"Petya\"},\n        {id: 6, name: \"Tanya\"}\n    ],\n    messagesData: [\n        {id: 1, message: \"Hello\"},\n        {id: 2, message: \"No\"},\n        {id: 3, message: \"Yes\"},\n        {id: 4, message: \"Hello\"},\n        {id: 5, message: \"No\"},\n        {id: 6, message: \"Yes\"}\n    ],\n    newMessageText: 'react',\n}\n\nconst dialogsReducer = (state = initialState, action) => {\n\n    switch (action.type) {\n        case ADD_MESSAGE:\n            const newMessage = {\n                id: 5,\n                message: state.newMessageText,\n            }\n\n            let copyState1 = {...state};\n            copyState1.copyMessagesData = [...state.messagesData];\n\n\n            copyState1.copyMessagesData.push(newMessage);\n            copyState1.newMessageText = '';\n            return copyState1;\n        case UPDATE_MESSAGE:\n\n            let copyState2 = {...state};\n\n            copyState2.newMessageText = action.text;\n            return copyState2;\n        default:\n            return state;\n    }\n\n}\n\nexport const AddMessageActionCreator = () => ({type: ADD_MESSAGE});\n\nexport const UpDateMessageActionCreator = (text) => ({\n    type: UPDATE_MESSAGE, message: text});\n\n\nexport default dialogsReducer;"],"mappings":"AAAA,MAAMA,WAAW,GAAG,aAAa;AACjC,MAAMC,cAAc,GAAG,gBAAgB;AAEvC,MAAMC,YAAY,GAAG;EACjBC,UAAU,EAAE,CACR;IAACC,EAAE,EAAE,CAAC;IAAEC,IAAI,EAAE;EAAM,CAAC,EACrB;IAACD,EAAE,EAAE,CAAC;IAAEC,IAAI,EAAE;EAAO,CAAC,EACtB;IAACD,EAAE,EAAE,CAAC;IAAEC,IAAI,EAAE;EAAM,CAAC,EACrB;IAACD,EAAE,EAAE,CAAC;IAAEC,IAAI,EAAE;EAAO,CAAC,EACtB;IAACD,EAAE,EAAE,CAAC;IAAEC,IAAI,EAAE;EAAO,CAAC,EACtB;IAACD,EAAE,EAAE,CAAC;IAAEC,IAAI,EAAE;EAAO,CAAC,CACzB;EACDC,YAAY,EAAE,CACV;IAACF,EAAE,EAAE,CAAC;IAAEG,OAAO,EAAE;EAAO,CAAC,EACzB;IAACH,EAAE,EAAE,CAAC;IAAEG,OAAO,EAAE;EAAI,CAAC,EACtB;IAACH,EAAE,EAAE,CAAC;IAAEG,OAAO,EAAE;EAAK,CAAC,EACvB;IAACH,EAAE,EAAE,CAAC;IAAEG,OAAO,EAAE;EAAO,CAAC,EACzB;IAACH,EAAE,EAAE,CAAC;IAAEG,OAAO,EAAE;EAAI,CAAC,EACtB;IAACH,EAAE,EAAE,CAAC;IAAEG,OAAO,EAAE;EAAK,CAAC,CAC1B;EACDC,cAAc,EAAE;AACpB,CAAC;AAED,MAAMC,cAAc,GAAG,YAAkC;EAAA,IAAjCC,KAAK,uEAAGR,YAAY;EAAA,IAAES,MAAM;EAEhD,QAAQA,MAAM,CAACC,IAAI;IACf,KAAKZ,WAAW;MACZ,MAAMa,UAAU,GAAG;QACfT,EAAE,EAAE,CAAC;QACLG,OAAO,EAAEG,KAAK,CAACF;MACnB,CAAC;MAED,IAAIM,UAAU,GAAG;QAAC,GAAGJ;MAAK,CAAC;MAC3BI,UAAU,CAACC,gBAAgB,GAAG,CAAC,GAAGL,KAAK,CAACJ,YAAY,CAAC;MAGrDQ,UAAU,CAACC,gBAAgB,CAACC,IAAI,CAACH,UAAU,CAAC;MAC5CC,UAAU,CAACN,cAAc,GAAG,EAAE;MAC9B,OAAOM,UAAU;IACrB,KAAKb,cAAc;MAEf,IAAIgB,UAAU,GAAG;QAAC,GAAGP;MAAK,CAAC;MAE3BO,UAAU,CAACT,cAAc,GAAGG,MAAM,CAACO,IAAI;MACvC,OAAOD,UAAU;IACrB;MACI,OAAOP,KAAK;EAAC;AAGzB,CAAC;AAED,OAAO,MAAMS,uBAAuB,GAAG,OAAO;EAACP,IAAI,EAAEZ;AAAW,CAAC,CAAC;AAAC,KAAtDmB,uBAAuB;AAEpC,OAAO,MAAMC,0BAA0B,GAAIF,IAAI,KAAM;EACjDN,IAAI,EAAEX,cAAc;EAAEM,OAAO,EAAEW;AAAI,CAAC,CAAC;AAAC,MAD7BE,0BAA0B;AAIvC,eAAeX,cAAc;AAAC;AAAA;AAAA"},"metadata":{},"sourceType":"module"}